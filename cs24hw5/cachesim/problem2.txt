Problem 2:

(d) Run the heaptest program with a direct-mapped cache of size 8192 bytes,
and a block size of 32 bytes.  Record the command-line invocation for the
program execution, including your cache parameters. Also, record the cache
miss-rate reported by the program:

./heaptest 32:256:1
Constructing memory for simulation (in reverse order):
 * Building memory of size 4000000 bytes
 * Building cache with a block-size of 32 bytes, 256 cache-sets,
   and 1 cache-lines per set.  Total cache size is 8192 bytes.

Generating 1000000 random floats to sort.
Sorting numbers using the heap.
Checking the results against the sorted inputs.

Memory-Access Statistics:

 * Cache reads=387851976 writes=156711356 hits=531488886 misses=13074446 
   miss-rate=2.40% random replacement policy
 * Memory reads=418382272 writes=334897760

 (e) Again, run the heaptest program with a fully associative cache of size
8192 bytes, and a block size of 32 bytes. Record the same details as for the
previous problem. (Note:  This run will be significantly slower, since our
cache simulator has a terribly inefficient mechanism for finding the cache-
line with a particular tag.)


 $ ./heaptest 32:1:256
Constructing memory for simulation (in reverse order):
 * Building memory of size 4000000 bytes
 * Building cache with a block-size of 32 bytes, 1 cache-sets,
   and 256 cache-lines per set.  Total cache size is 8192 bytes.

Generating 1000000 random floats to sort.
Sorting numbers using the heap.
Checking the results against the sorted inputs.

Memory-Access Statistics:

 * Cache reads=387851976 writes=156711356 hits=531217776 misses=13345556 
   miss-rate=2.45% random replacement policy
 * Memory reads=427057792 writes=345422560

(g) Least Recently used:

$ ./heaptest 32:256:1
Constructing memory for simulation (in reverse order):
 * Building memory of size 4000000 bytes
 * Building cache with a block-size of 32 bytes, 256 cache-sets,
   and 1 cache-lines per set.  Total cache size is 8192 bytes.

Generating 1000000 random floats to sort.
Sorting numbers using the heap.
Checking the results against the sorted inputs.
Memory-Access Statistics:

 * Cache reads=387851976 writes=156711356 hits=531488886 misses=13074446 
   miss-rate=2.40% LRU replacement policy
 * Memory reads=418382272 writes=334897760



$ ./heaptest 32:1:256
Constructing memory for simulation (in reverse order):
 * Building memory of size 4000000 bytes
 * Building cache with a block-size of 32 bytes, 1 cache-sets,
   and 256 cache-lines per set.  Total cache size is 8192 bytes.

Generating 1000000 random floats to sort.
Sorting numbers using the heap.
Checking the results against the sorted inputs.

Memory-Access Statistics:

 * Cache reads=387851976 writes=156711356 hits=532270889 misses=12292443 
   miss-rate=2.26% LRU replacement policy
 * Memory reads=393358176 writes=315978048